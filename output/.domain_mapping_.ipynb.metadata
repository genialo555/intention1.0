{"timestamp": 1748515787.251482, "stored_source_code": "# declare a list tasks whose products you want to use as inputs\nupstream = None\n\n# Domain Mapping with MetaLIMEN\n\nIn this notebook we'll show how MetaLIMEN embeds domain descriptions into a meta-intention space, computes inter-domain distances, and visualizes their clustering.\nimport yaml, json\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.decomposition import PCA\nfrom modules.meta_limen.meta_limen import MetaLIMEN\n## Load configuration & instantiate MetaLIMEN\ncfg_file = \"configs/meta_limen_config.yaml\"\nml = MetaLIMEN(cfg_file)\ncfg = yaml.safe_load(open(cfg_file))\ndomains = [d[\"name\"] for d in cfg[\"target_domains\"]]\n## Define meta-intentions & build DataFrame\nintents = ml.define_learning_intentions()\ndf = pd.DataFrame([{\n    \"domain\": i[\"domain\"],\n    **{f\"dim{j}\": v for j, v in enumerate(i[\"meta_position\"])}\n}\n for i in intents])\n## Inter-domain Cosine Similarity Heatmap\nM = cosine_similarity(df.filter(regex='^dim').values)\nsns.heatmap(M, xticklabels=df.domain, yticklabels=df.domain, cmap=\"viridis\", annot=True)\nplt.title(\"Inter-Domain Cosine Similarities\")\nplt.show()\n## PCA of Meta-Intentions\npca_results = PCA(n_components=2).fit_transform(df[[c for c in df if c.startswith(\"dim\")]])\nfig, ax = plt.subplots()\nax.scatter(pca_results[:,0], pca_results[:,1])\nfor x, y, label in zip(pca_results[:,0], pca_results[:,1], df.domain):\n    ax.text(x+0.01, y+0.01, label)\nax.set_title(\"PCA of Meta-Intentions\")\nplt.show()\n## Interpretation\n\nNotice how some domains cluster closer, indicating shared curricular resources or overlapping conceptual space. ", "params": {}}